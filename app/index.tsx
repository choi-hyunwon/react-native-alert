import * as Notifications from 'expo-notifications';
import { StatusBar } from 'expo-status-bar';
import React, { useEffect, useState } from 'react';
import {
  ActivityIndicator,
  Alert,
  Platform,
  StyleSheet,
  Text,
  TouchableOpacity,
  View,
} from 'react-native';
import {
  fetchBinancePrice,
  fetchUpbitPrice,
  getExchangeRate,
} from '../src/api/cryptoAPI';

// 1. ÏïåÎ¶º Ìï∏Îì§Îü¨ ÏÑ§Ï†ï (Ïï±Ïù¥ Ïã§Ìñâ Ï§ëÏùº ÎïåÎèÑ ÏïåÎ¶ºÏùÑ ÌëúÏãú)
Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldShowAlert: true,
    shouldPlaySound: false,
    shouldSetBadge: false,
  }),
});

export default function HomeScreen() {
  const [upbitPrice, setUpbitPrice] = useState<number | null>(null);
  const [binancePrice, setBinancePrice] = useState<number | null>(null);
  const [exchangeRate, setExchangeRate] = useState<number | null>(null);
  const [kimchiPremium, setKimchiPremium] = useState<string | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // 2. ÏïåÎ¶º Î≥¥ÎÇ¥Îäî Ìï®Ïàò
  const schedulePushNotification = async (premium: string) => {
    await Notifications.scheduleNotificationAsync({
      content: {
        title: "ÍπÄÏπò ÌîÑÎ¶¨ÎØ∏ÏóÑ ÏóÖÎç∞Ïù¥Ìä∏ üöÄ",
        body: `ÌòÑÏû¨ ÍπÄÏπò ÌîÑÎ¶¨ÎØ∏ÏóÑÏùÄ ${premium}% ÏûÖÎãàÎã§.`,
      },
      trigger: null, // Ï¶âÏãú Î∞úÏÜ°
    });
  }

  // 3. ÏïåÎ¶º Í∂åÌïú ÏöîÏ≤≠ Ìï®Ïàò
  const registerForPushNotificationsAsync = async () => {
    let token;
    if (Platform.OS === 'android') {
      await Notifications.setNotificationChannelAsync('default', {
        name: 'default',
        importance: Notifications.AndroidImportance.MAX,
        vibrationPattern: [0, 250, 250, 250],
        lightColor: '#FF231F7C',
      });
    }

    const { status: existingStatus } = await Notifications.getPermissionsAsync();
    let finalStatus = existingStatus;
    if (existingStatus !== 'granted') {
      const { status } = await Notifications.requestPermissionsAsync();
      finalStatus = status;
    }
    if (finalStatus !== 'granted') {
      Alert.alert('ÏïåÎ¶º Í∂åÌïúÏù¥ Í±∞Î∂ÄÎêòÏóàÏäµÎãàÎã§!', 'ÏïåÎ¶º Í∏∞Îä•ÏùÑ ÏÇ¨Ïö©ÌïòÎ†§Î©¥ ÏÑ§Ï†ïÏóêÏÑú Í∂åÌïúÏùÑ ÌóàÏö©Ìï¥Ï£ºÏÑ∏Ïöî.');
      return;
    }
  }

  const calculatePremium = (krw: number, usd: number, rate: number) => {
    if (krw && usd && rate) {
      const premium = (((krw / (usd * rate)) - 1) * 100).toFixed(2);
      setKimchiPremium(premium);
      // 4. ÌîÑÎ¶¨ÎØ∏ÏóÑ Í≥ÑÏÇ∞ ÌõÑ ÏïåÎ¶º Ìò∏Ï∂ú
      schedulePushNotification(premium);
    }
  };

  const loadData = async () => {
    // ÏµúÏ¥à Î°úÎî© ÏãúÏóêÎßå Î°úÎî© Ïù∏ÎîîÏºÄÏù¥ÌÑ∞ ÌëúÏãú
    if (loading) {
        // Ïù¥ Î∂ÄÎ∂ÑÏùÄ Í∑∏ÎåÄÎ°ú ÎëêÏñ¥ ÏµúÏ¥à Ïã§Ìñâ ÏãúÏóêÎßå trueÍ∞Ä ÎêòÎèÑÎ°ù Ìï®
    } else {
        // ÏûêÎèô Í∞±Ïã† ÏãúÏóêÎäî Î∞±Í∑∏ÎùºÏö¥ÎìúÏóêÏÑú Ï°∞Ïö©Ìûà Ïã§Ìñâ
    }
    
    try {
      setError(null);
      const [krw, usd, rate] = await Promise.all([
        fetchUpbitPrice(),
        fetchBinancePrice(),
        getExchangeRate(),
      ]);

      setUpbitPrice(krw);
      setBinancePrice(usd);
      setExchangeRate(rate);
      calculatePremium(krw, usd, rate);
    } catch (e) {
      setError('Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§Îäî Îç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
      console.error(e);
    } finally {
      if(loading) setLoading(false);
    }
  };

  useEffect(() => {
    // 5. Ïï± ÏãúÏûë Ïãú ÏïåÎ¶º Í∂åÌïú ÏöîÏ≤≠ Î∞è Ï¥àÍ∏∞ Îç∞Ïù¥ÌÑ∞ Î°úÎìú
    registerForPushNotificationsAsync();
    loadData();

    // 6. 3Î∂Ñ(180000ms)ÎßàÎã§ ÏûêÎèô Í∞±Ïã† ÏÑ§Ï†ï
    const interval = setInterval(() => {
      console.log("3Î∂ÑÎßàÎã§ Îç∞Ïù¥ÌÑ∞ ÏûêÎèô Í∞±Ïã† Ïã§Ìñâ");
      loadData();
    }, 180000);

    // 7. Ïª¥Ìè¨ÎÑåÌä∏Í∞Ä ÏÇ¨ÎùºÏßà Îïå Ïù∏ÌÑ∞Î≤å Ï†ïÎ¶¨ (Î©îÎ™®Î¶¨ ÎàÑÏàò Î∞©ÏßÄ)
    return () => clearInterval(interval);
  }, []);

  if (loading) {
    return (
      <View style={styles.container}>
        <ActivityIndicator size="large" />
        <Text style={styles.loadingText}>Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§Îäî Ï§ë...</Text>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      <Text style={styles.title}>ÎπÑÌä∏ÏΩîÏù∏ ÍπÄÏπò ÌîÑÎ¶¨ÎØ∏ÏóÑ</Text>
      
      {error ? (
        <Text style={styles.errorText}>{error}</Text>
      ) : (
        <>
          <View style={styles.dataRow}>
            <Text style={styles.label}>ÏóÖÎπÑÌä∏ (KRW)</Text>
            <Text style={styles.value}>{upbitPrice?.toLocaleString()}Ïõê</Text>
          </View>
          <View style={styles.dataRow}>
            <Text style={styles.label}>Î∞îÏù¥ÎÇ∏Ïä§ (USD)</Text>
            <Text style={styles.value}>${binancePrice?.toLocaleString()}</Text>
          </View>
          <View style={styles.dataRow}>
            <Text style={styles.label}>ÌôòÏú® (USD/KRW)</Text>
            <Text style={styles.value}>{exchangeRate?.toLocaleString()}Ïõê</Text>
          </View>

          <View style={styles.premiumContainer}>
            <Text style={styles.premiumLabel}>ÍπÄÏπò ÌîÑÎ¶¨ÎØ∏ÏóÑ</Text>
            <Text style={styles.premiumValue}>{kimchiPremium}%</Text>
          </View>
        </>
      )}

      <View style={styles.buttonContainer}>
        <TouchableOpacity
          style={[styles.button, loading && styles.buttonDisabled]}
          onPress={loadData}
          disabled={loading}>
          <Text style={styles.buttonText}>ÏÉàÎ°úÍ≥†Ïπ®</Text>
        </TouchableOpacity>
      </View>

      <StatusBar style="auto" />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 20,
  },
  title: {
    fontSize: 28,
    fontWeight: 'bold',
    marginBottom: 30,
  },
  loadingText: {
    marginTop: 10,
    fontSize: 16,
  },
  errorText: {
    color: 'red',
    fontSize: 16,
  },
  dataRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    width: '100%',
    paddingVertical: 10,
    borderBottomWidth: 1,
    borderBottomColor: '#eee',
  },
  label: {
    fontSize: 18,
    color: '#555',
  },
  value: {
    fontSize: 18,
    fontWeight: '600',
  },
  premiumContainer: {
    marginTop: 30,
    alignItems: 'center',
  },
  premiumLabel: {
    fontSize: 20,
    color: '#888',
  },
  premiumValue: {
    fontSize: 40,
    fontWeight: 'bold',
    color: '#d9534f',
    marginTop: 5,
  },
  buttonContainer: {
    marginTop: 40,
    width: '80%',
  },
  button: {
    backgroundColor: '#6200EE',
    paddingVertical: 15,
    borderRadius: 30,
    alignItems: 'center',
    justifyContent: 'center',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
    elevation: 5,
  },
  buttonDisabled: {
    backgroundColor: '#a9a9a9',
  },
  buttonText: {
    color: 'white',
    fontSize: 18,
    fontWeight: 'bold',
  },
});
